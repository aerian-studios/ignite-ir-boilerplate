/* ***********************************************************
* A short word on how to use this automagically generated file.
* We're often asked in the ignite gitter channel how to connect
* to a to a third party api, so we thought we'd demonstrate - but
* you should know you can use sagas for other flow control too.
*
* Other points:
*  - You'll need to add this saga to sagas/index.js
*  - This template uses the api declared in sagas/index.js, so
*    you'll need to define a constant in that file.
* @flow
*************************************************************/

import { call, put } from 'redux-saga/effects'
import <%= props.name %>Actions from '../Redux/<%= props.name %>Redux'
import type { <%= props.name %>Action, Immutable<%= props.name %>State } from '../Redux/<%= props.name %>Redux'
import type { <%= props.name %>Api, <%= props.name %>Response } from '../Services/Api'


export function * get<%= props.name %> (api, action:<%= props.name %>Action):Iterable<Immutable<%= props.name %>State> {
  const { data } = action
  // make the call to the api
  const response: ApiResponse<%= props.name %>Response > = yield call(api.get<%= props.name %>Response , data || '')
    
  // success?
  if (response.ok) {
    // You might need to change the response here - do this with a 'transform',
    // located in ../Transforms/. Otherwise, just pass the data back from the api.
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Success(response.data))
  } else {
    yield put(<%= props.name %>Actions.<%= camelCase(props.name) %>Failure())
  }
}
