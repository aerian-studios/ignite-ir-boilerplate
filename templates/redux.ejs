// @flow
import { Reducer } from 'redux'
import { createActions, createReducer } from 'reduxsauce'
import * as SI from 'seamless-immutable'

/* ------------- Types and Action Creators ------------- */

const { Types, Creators } = createActions({
  <%= camelCase(props.name) %>Request: ["data"],
  <%= camelCase(props.name) %>Success: ["payload"],
  <%= camelCase(props.name) %>Failure: null,
});

export const <%= pascalCase(props.name) %>Types = Types;
export default Creators;

export type <%= pascalCase(props.name) %>State {
  data?: string | null;
  error?: boolean | null;
  fetching?: boolean | null;
  payload?: string | null;
}

export type <%= pascalCase(props.name) %>Action = <%= pascalCase(props.name) %>State & { type: string };

export type Immutable<%= pascalCase(props.name) %>State = SI.ImmutableObject<<%= pascalCase(props.name) %>State>;

/* ------------- Initial State ------------- */

export const INITIAL_STATE: Immutable<%= pascalCase(props.name) %>State = SI.from({
  data: null,
  error: null,
  fetching: null,
  payload: null,
});

/* ------------- Reducers ------------- */

export const request: Reducer<Immutable<%= pascalCase(props.name) %>State, <%= pascalCase(props.name) %>Action> =
(state: Immutable<%= pascalCase(props.name) %>State, { data }: <%= pascalCase(props.name) %>Action) =>
  state.merge({ fetching: true, data, payload: null })

export const success: Reducer<Immutable<%= pascalCase(props.name) %>State, <%= pascalCase(props.name) %>Action> =
(state: Immutable<%= pascalCase(props.name) %>State, action: <%= pascalCase(props.name) %>Action) => {
  const { data } = action
  return state.merge({ fetching: false, error: null, data })
};

export const failure: Reducer<Immutable<%= pascalCase(props.name) %>State, <%= pascalCase(props.name) %>Action> =
(state: Immutable<%= pascalCase(props.name) %>State) =>
  state.merge({ fetching: false, error: true, data: null })

/* ------------- Hookup Reducers To Types ------------- */

export const reducer = createReducer(INITIAL_STATE, {
  <%= camelCase(props.name) %>Request: request,
  <%= camelCase(props.name) %>Success: success,
  <%= camelCase(props.name) %>Failure: failure,
});
